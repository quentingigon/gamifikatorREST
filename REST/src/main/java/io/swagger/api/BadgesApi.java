/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.1-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Badge;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-01-02T12:37:14.114Z")

@Api(value = "badges", description = "the badges API")
public interface BadgesApi {

    @ApiOperation(value = "Add a new badge", nickname = "createBadge", notes = "", response = Badge.class, tags={ "badges", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The badge has been created", response = Badge.class),
        @ApiResponse(code = 400, message = "Invalid input"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/badges",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Badge> createBadge(@ApiParam(value = "New badge" ,required=true )  @Valid @RequestBody Badge body);


    @ApiOperation(value = "Delete badge", nickname = "deleteBadge", notes = "Delete badge", response = Badge.class, tags={ "badges", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The rule has been deleted", response = Badge.class),
        @ApiResponse(code = 400, message = "Invalid input"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/badges",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Badge> deleteBadge(@ApiParam(value = "Badge to be deleted" ,required=true )  @Valid @RequestBody Badge body);


    @ApiOperation(value = "Get badges", nickname = "getBadges", notes = "Returns list of badges", response = Badge.class, responseContainer = "List", tags={ "badges", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Badge.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/badges",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Badge>> getBadges();


    @ApiOperation(value = "Update exisiting badge", nickname = "updateBadge", notes = "", response = Badge.class, tags={ "badges", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The badge has been updated", response = Badge.class),
        @ApiResponse(code = 400, message = "Invalid input"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/badges",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Badge> updateBadge(@ApiParam(value = "Update badge" ,required=true )  @Valid @RequestBody Badge body);

}
